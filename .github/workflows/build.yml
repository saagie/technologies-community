name: Build

on: 
    pull_request:
        types: [assigned, opened, reopened]
    push:

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
          - uses: actions/checkout@v1
          - name: Check docker images
            uses: jannekem/run-python-script-action@v1
            with:
              script: |
                import os
                import yaml
                #import requests
                import sys
                for path, subdirs, files in os.walk("."):
                    for name in files:
                        if (name=="metadata.yaml" or name=="metadata.yml"):
                            with open(os.path.join(path, name), 'r') as stream:
                                try:
                                    meta = yaml.safe_load(stream)
                                    image = meta['contexts'][0]['dockerInfo']['image']
                                    version = meta['contexts'][0]['dockerInfo']['version']
                                    print("Check : "+image+":"+version)
                                    #if not(requests.get("https://hub.docker.com/v2/repositories/"+image+"/tags/"+version+"/").json()["name"] == "version"):
                                    sys.exit(1)
                                except yaml.YAMLError as exc:
                                    print(exc)
          - name: Build
            uses: montudor/action-zip@v0.1.0
            with: 
              args: zip -qq -r technologies.zip technologies/ . -i \*.yaml
          - name: Extract version
            id: extract_version
            run: echo "::set-output name=v::$(cat version.properties | grep 'semver' | sed -e 's/^version.semver=//')"
          - name: List all releases
            uses: actions/github-script@0.3.0
            with:
              github-token: ${{secrets.TOKEN_GITHUB}}
              script: |
                const result = await github.repos.listReleases(context.repo);
                result.data
                  .filter(release => release.tag_name == "${{ steps.extract_version.outputs.v }}")
                  .forEach(function(release){
                    const releaseObj = {release_id:release.id, owner:context.repo.owner, repo:context.repo.repo}
                    github.repos.deleteRelease(releaseObj)
                  });
          - name: Create Release
            id: create_release
            uses: actions/create-release@v1
            env:
              GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
            with:
                tag_name: ${{ steps.extract_version.outputs.v }}
                release_name: Release ${{ steps.extract_version.outputs.v }}
                draft: false
                prerelease: true
          - name: Upload Release technologies Asset ZIP
            id: upload-release-asset-technologies-zip
            uses: actions/upload-release-asset@v1.0.1
            env:
              GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB}}
            with:
              upload_url: ${{ steps.create_release.outputs.upload_url }}
              asset_path: ./technologies.zip
              asset_name: technologies.zip
              asset_content_type: application/zip