name: Build Prerelease

on:
  push:
    branches:
    - 'feature/**'
    - 'bug/**'
    - '!master'
    tags-ignore:
    - '**'

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
          - uses: actions/checkout@v1
          - name: Check if docker images exist
            run: |
              ./gradlew checkDockerImages
          - name: Build
            run: |
              ./gradlew createZip
          - name: Change version to BETA
            run: |
              ./gradlew -Dversion.prerelease=BETA -Dversion.buildmeta=$GITHUB_REF_NAME
              sed -i -e 1,2d version.properties
              cat version.properties
          - name: extract branch
            id: git_info
            run: echo "changes=$(git status -s | wc -l)" >> $GITHUB_OUTPUT
          - name: Commit files
            if: steps.git_info.outputs.changes > 0
            run: |
              git config --local user.email "service@saagie.com"
              git config --local user.name "Team Service"
              git status
              git add .
              git commit -m "[BOT] Set version for this branch"
          - name: Push changes
            if: "!contains(github.event.head_commit.message, '[BOT]')"
            uses: ad-m/github-push-action@master
            with:
              github_token: ${{ secrets.TOKEN_GITHUB}}
              branch: ${{ github.ref }}
          - name: Extract version
            id: extract_version
            run: echo "v=$(cat version.properties | grep 'semver' | sed -e 's/^version.semver=//')" >> $GITHUB_OUTPUT
          - name: List all releases
            uses: actions/github-script@v6.3.3
            with:
              github-token: ${{secrets.TOKEN_GITHUB}}
              script: |
                const result = await github.repos.listReleases(context.repo);
                result.data
                  .filter(release => release.tag_name == "${{ steps.extract_version.outputs.v }}")
                  .forEach(function(release){
                    const releaseObj = {release_id:release.id, owner:context.repo.owner, repo:context.repo.repo}
                    github.repos.deleteRelease(releaseObj)
                  });
          - name: Create Release
            id: create_release
            uses: actions/create-release@v1
            env:
              GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
            with:
                tag_name: ${{ steps.extract_version.outputs.v }}
                release_name: Release ${{ steps.extract_version.outputs.v }}
                draft: false
                prerelease: true
          - name: Upload Release technologies Asset ZIP
            id: upload-release-asset-technologies-zip
            uses: actions/upload-release-asset@v1.0.1
            env:
              GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB}}
            with:
              upload_url: ${{ steps.create_release.outputs.upload_url }}
              asset_path: ./dist/technologies.zip
              asset_name: technologies.zip
              asset_content_type: application/zip