name: Promote

on:
  pull_request:
    types: [closed]

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
          - uses: actions/checkout@v1
          - name: Check if docker images exist
            run: |
              ./gradlew checkDockerImages
          - name: Build
            run: |
              ./gradlew createZip
          - name: Extract version
            id: extract_version
            run: echo "::set-output name=v::$(cat version.properties | grep 'semver' | sed -e 's/^version.semver=//')"
          - name: Delete PreRelease
            id: delete_prerelease
            uses: actions/github-script@v3
            with:
              github-token: ${{secrets.TOKEN_GITHUB}}
              script: |
                const result = await github.repos.listReleases(context.repo);
                result.data
                  .filter(release => release.tag_name == "${{ steps.extract_pr_version.outputs.v }}")
                  .forEach(function(release){
                      const releaseObj = {release_id:release.id, owner:context.repo.owner, repo:context.repo.repo}
                      github.repos.deleteRelease(releaseObj)
                    });
          - name: Delete PreRelease Tag
            run: |
              git config --local user.email "github-action@saagie.com"
              git config --local user.name "GitHub Action Bot"
              remote_repo="https://${{ github.actor }}:${{ secrets.TOKEN_GITHUB }}@github.com/${{ github.repository }}.git"
              git push --delete "${remote_repo}" ${{ steps.extract_pr_version.outputs.v }}
          - name: Create Release
            id: create_release
            uses: actions/create-release@v1
            env:
              GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
            with:
                tag_name: ${{ steps.extract_version.outputs.v }}
                release_name: Release ${{ steps.extract_version.outputs.v }}
                draft: false
                prerelease: false
          - name: Upload Release technologies Asset ZIP
            id: upload-release-asset-technologies-zip
            uses: actions/upload-release-asset@v1.0.1
            env:
              GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB}}
            with:
              upload_url: ${{ steps.create_release.outputs.upload_url }}
              asset_path: ./dist/technologies.zip
              asset_name: technologies.zip
              asset_content_type: application/zip